apply plugin: 'com.android.application'
apply plugin: 'robolectric'
apply plugin: 'jacoco'

android {
    compileSdkVersion 21
    buildToolsVersion '21.1.2'

    defaultConfig {
        applicationId 'org.pvoid.apteryx.next'
        versionCode 1
        versionName "0.9"
        minSdkVersion 14
        targetSdkVersion 21

        buildConfigField 'String', 'SERVER_URL', "\"${project.properties['osmp.server_url']}\""
        buildConfigField 'String', 'USER_AGENT', '"Dealer v0"'
        buildConfigField 'String', 'CREATE_ACCOUNT_INFO_URL', "\"${project.properties['howto.account_link']}\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

jacoco {
    toolVersion = "0.7.1.201405082137"
}

def coverageSourceDirs = [
        "${projectDir.absolutePath}/src/main/java"
]

task jacocoTestReport(type:JacocoReport, dependsOn: "testDebug") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: "${projectDir.absolutePath}/build/intermediates/classes/debug",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/*$ModuleAdapter*.*',
                       'org/pvoid/apteryx/**/*Module.class',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files("${projectDir.absolutePath}/build/jacoco/testDebug.exec")

    reports {
        xml.enabled = true
        html.enabled = true
    }

    doFirst {
        new File("${projectDir.absolutePath}/build/intermediates/classes/debug").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
    afterEvaluate {
        // just clean up coveralls dashboard, following reports are not of interest
        testDebug.reports.junitXml.enabled = false
    }
}

dependencies {
    compile 'com.android.support:support-v4:21.0.3'
    compile 'com.android.support:recyclerview-v7:21.0.3'
    compile 'com.android.support:cardview-v7:21.0.3'
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'com.squareup.okhttp:okhttp:2.1.0'
    compile 'com.squareup.dagger:dagger:1.2.2'
    compile 'com.squareup.dagger:dagger-compiler:1.2.2'
    compile 'org.slf4j:slf4j-api:1.7.10'
    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'org.easytesting:fest-reflect:1.4.1'
    androidTestCompile 'org.robolectric:robolectric:2.4'
    androidTestCompile 'org.mockito:mockito-all:1.9.5'
    androidTestCompile 'com.squareup.okhttp:mockwebserver:2.0.0'
}
